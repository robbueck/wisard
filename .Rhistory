wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
# @param second_range Optional, name of a column in \code{granges_list} containing
#  another \linkS4class{GRangesList} object. If set, for intervals in
#  granges_list to be compatible, they also have to be compatible in
#  \code{second_range}. (better remove this and solve problem differently, no optimal
#  solution here).
get_wis <- function(granges_list, overlap=0, max_score = "score",
score_funct = function(x, y, n) x + y) {
# check arguments
Check <- checkmate::makeAssertCollection()
checkmate::assertClass(granges_list, classes = "GRanges", add = Check)
checkmate::assertInt(overlap, na.ok = F, lower = 0, add = Check)
checkmate::assertSubset(max_score,
choices = colnames(mcols(granges_list)),
empty.ok = F,
add = Check)
checkmate::assertFunction(score_funct, nargs = 3, add = Check)
# checkmate::assertFunction(max_funct, nargs = 3, add = Check)
checkmate::reportAssertions(Check)
# cat("get_wis was called with following parameters:\noverlap\t", overlap, "\nmax_score\t", max_score, "\n")
#sort everything by end position and score
granges_list <- sort(granges_list, by = ~end + -eval(as.name(max_score)))
# check if granges_list contains more than one element,
# otherwise return original list
if (length(granges_list) > 1) {
granges_list$ID <- 1:length(granges_list)        # prevent things from getting mixed up
n_alis <- length(granges_list)
wis <- data.frame(matrix(ncol = 3, nrow =n_alis))
colnames(wis) <- c("score", "r", "maxscore")
# initialisation
# wis$r <- 2                                            # number of alignments in WIS currently ending at the specific alignment if another one is added
wis$score <- mcols(granges_list)[[max_score]]
# wis$maxscore <- max_funct( x = wis$score, y = 0, n = wis$r )
# neg <- which(wis$maxsumscore < 0)
P <- rep(0, n_alis)                                   # list with pointers for each alignment to the previous one in its max-score set
for ( i in 2: n_alis ) {
# get all compatible previous intervals
no_overlaps <- which(countOverlaps(granges_list[1:(i-1)],
granges_list[i],
ignore.strand = T,
minoverlap = (overlap + 1 )) == 0)
if ( length(no_overlaps) > 0) {
# if no non-overlapping range before, this is the first in set, just
# continue
# find maximum compatible set and store pointer
j_alis <- granges_list[no_overlaps,]
j_scores <- wis[no_overlaps,]$score
max_ID <- j_alis[which.max(j_scores)]$ID
P[i] <- max_ID
# update r and score
# wis[i,]$r <- (wis[max_ID,]$r + 1 )
# wis[i,]$maxscore <- max_funct( x = wis[max_ID,]$score,
#                                y = wis[i,]$score,
#                                n = wis[i,]$r )
wis[i,]$score <- score_funct( x = wis[max_ID,]$score,
y = wis[i,]$score,
n = wis[i,]$r )
}
}
wis$r <- wis$r - 1                            # nothing more is added
# wis$maxscore <- max_funct( x = wis$score, y = 0, n = wis$r )
# backtracing
K <- which.max(wis$score)
cat("max score is: ", max(wis$score), "\n")
final_set_ids <- c()
while ( K > 0 ) {
final_set_ids <- c(final_set_ids, K)
K = P[K]
}
return(list( alignments = granges_list[final_set_ids], max_score = max(wis$score) ))
} else if (length(granges_list) == 1) {
# input only contains one interval
return(list( alignments = granges_list,
max_score = score_funct(x = mcols(granges_list)[[max_score]][1],
y = 0,
n = 1) ))
} else {
# input is empty
warning("Input does not contain any intervals, returning empty set")
return(list( alignments = granges_list, max_score = -Inf ))
}
}
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
get_best_start <- function(granges_list, overhang = 0) {
Check <- checkmate::makeAssertCollection()
checkmate::assertClass(granges_list, classes = "GRanges", add = Check)
checkmate::assertInt(overhang, na.ok = F, lower = 0, add = Check)
checkmate::assertLogical(isCircular(granges_list), add = Check)
checkmate::reportAssertions(Check)
if (length(granges_list) < 1) {
print("warning, GRanges object empty, return 0")
return(0)
}
new_start <- c(0)
# check if pos 1 of the genome is covered by anything
circ_test <- GRanges(seqnames = seqnames(granges_list)[1],
ranges = IRanges(1, end = 1))
olap_start <- which(countOverlaps(granges_list, circ_test,
ignore.strand = T) > 0)
# if pos 1 is covered by something
if (length(olap_start) > 0){
# as soon as it's 1, the first alignemt could be overlapping with the last one, keep it 0!
cat("rearranging genome\n")
# count overlaps at start postitions
granges_list_olaps <- granges_list
end(granges_list_olaps) <- start(granges_list)          # granges object only covering the start positions
olaps <- countOverlaps(granges_list_olaps, granges_list, ignore.strand = T)
# get position of best starting point
possible_starts <- c(which.min(olaps))
new_start_pos <- start(granges_list)[possible_starts]
olap_test <- GRanges(seqnames = seqnames(granges_list)[1],
ranges = IRanges(new_start_pos,
end = new_start_pos))
# get indices for everything overlapping the start point of optimal start
new_start <- which(countOverlaps(granges_list,
olap_test,
ignore.strand = T) > 0)
# check if any alignments overlap position 1 and are longer than overhang
# they might not be good alignments, overhang should be increased then
problematic <- which(
end(granges_list[olap_start]) == seqlengths(granges_list) + overhang)
if (length(problematic) > 0) {
better_len <- max(end(granges_list[which(start(granges_list) == 1)]))
cat("Following alignments span more than the ", overhang,
" added bases at the end.\nBetter values could be at least ",
better_len, "\n")
}
} else {
# best start is first alignment
new_start <- c(1)
}
# check output
if(length(new_start) < 1 || new_start == 0) {
stop("Granges object not empty, but no start position found,
something went wrong")
}
return(new_start)
}
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
run_get_wis <- function(granges_list, is_circular, overhang = 0, use_strand = F,
frame_col = NULL, score_col = "score",
score_f = function(x, y, n) x + y,
# max_f = function(x, y, n) x + y,
overlap = 0,
second_range = NULL)
{
Check <- checkmate::makeAssertCollection()
checkmate::assertClass(granges_list, classes = "GRanges", add = Check)
checkmate::assertInt(length(granges_list), na.ok = F, lower = 1, add = Check)
checkmate::assertLogical(is_circular, add = Check)
checkmate::assertInt(overhang, na.ok = F, lower = 0, add = Check)
checkmate::assertInt(overlap, na.ok = F, lower = 0, add = Check)
checkmate::assertLogical(use_strand, add = Check)
checkmate::assertSubset(frame_col, choices = colnames(mcols(granges_list)), empty.ok = T,
add = Check)
checkmate::assertFunction(score_f, nargs = 3, add = Check)
# checkmate::assertFunction(max_f, nargs = 3, add = Check)
checkmate::reportAssertions(Check)
# cat("run_get_wis was called with following parameters:\nis_circular\t", is_circular, "\n overhang\t", overhang,
#     "\nuse_strand\t", use_strand, "\nframe_col\t", frame_col, "\nscore_col\t", score_col, "\noverlap\t", overlap, "\n")
start_l <- Sys.time()
if(length(isCircular(granges_list)) > 1) {
warning("BLAST-Hits consist of more than one sequence,behaviour
of algorithm is uncertain in that case")
}
isCircular(granges_list) <- rep(is_circular, length(isCircular(granges_list)))
# remove all alignments in overhang
if (is_circular) {
# print(seqlengths(granges_list))
# not here, should be done before
# seqlengths(granges_list) <- seqlengths(granges_list) - overhang
granges_list <- granges_list[which(start(granges_list) < seqlengths(granges_list))]
}
if (is.null(frame_col)) {
# not use frame
###############
if (use_strand) {
# use strand but not frame
##########################
print("strand yes, frame no")
# split based on strand to analyze each strand specifically
# otherwise output is not right anymore
print("asdghkj")
granges_plus <- granges_list[which(strand(granges_list) == "+")]
print("fgfg")
granges_minus <- granges_list[which(strand(granges_list) == "-")]
print("a")
# get start positions to calculate WIS for
if (is_circular) {
start_pos_plus <- get_best_start(granges_plus, overhang = overhang)
start_pos_minus <- get_best_start(granges_minus, overhang = overhang)
} else {
start_pos_plus <- 1
start_pos_minus <- 1
}
print("b")
# run get_wis for all starting positions and find the best result
# what about *?
# for plus strand
if (start_pos_plus[1] == 0) {
print("no intervals on plus strand, continue anyway")
best_data_plus <- granges_plus
} else {
print("analyzing + strand")
score <- -Inf
for (s in start_pos_plus) {
cat("calculate wis for start alignment ", s, "\n")
# rearrange for current start
granges_plus<- c(granges_plus[s:length(granges_plus)], granges_plus[0:(s-1)])
from_get_wis <- get_wis(granges_plus,
max_score = score_col,
score_funct = score_f,
# max_funct = max_f,
overlap = overlap)
new_data_plus <- from_get_wis$alignments
sum_score <- from_get_wis$max_score
if (sum_score > score) {
score <- sum_score
best_data_plus <- new_data_plus
}
}
}
# for minus strand
if (start_pos_minus[1] == 0) {
print("no intervals on minus strand, continue anyway")
best_data_minus <- granges_minus
} else {
print("analyzing - strand")
score <- -Inf
for (s in start_pos_minus) {
cat("calculate wis for start alignment ", s, "\n")
# rearrange for current start
granges_minus<- c(granges_minus[s:length(granges_minus)], granges_minus[0:(s-1)])
from_get_wis <- get_wis(granges_minus,
max_score = score_col,
score_funct = score_f,
# max_funct = max_f,
overlap = overlap)
new_data_minus <- from_get_wis$alignments
sum_score <- from_get_wis$max_score
if (sum_score > score) {
score <- sum_score
best_data_minus <- new_data_minus
}
}
}
final_data <- c(best_data_minus, best_data_plus)
} else {
# use neither strand nor frame
##############################
print("strand no, frame no")
if(is_circular) {
start_pos <- get_best_start(granges_list, overhang = overhang)
} else {
start_pos <- 1
}
if (start_pos[1] == 0) {
stop("no intervals found to compute WIS")
} else {
final_data <- list()
score <- -Inf
for (s in start_pos) {
# rearrange for current start
cat("calculate wis for start pos: ", s, "\n")
granges_list <- c(granges_list[s:length(granges_list)], granges_list[0:(s-1)])
from_get_wis <- get_wis(granges_list,
max_score = score_col,
score_funct = score_f,
# max_funct = max_f,
overlap = overlap)
new_data <- from_get_wis$alignments
sum_score <- from_get_wis$max_score
if (sum_score > score) {
score <- sum_score
final_data <- new_data
}
}
}
}
} else {
# use frame
###########
print("frame yes")
# if (!is.null(second_range)) {
#   warning("Arguments second_range and frame_col are not compatible,
#           at least one of them has to be NULL.\nArgument second_range
#           will be ignored")
# }
if (use_strand) {
frames <- levels(factor(mcols(granges_list)[[frame_col]]))
} else {
# here strand information is lost (but should be kept in the strand field
# and be able to get restored?)
frames <- levels(factor(abs(mcols(granges_list)[[frame_col]])))
}
for ( f in as.numeric(frames) ) {
cat("calculating WIS for frame ", f, "\n")
if (use_strand) {
current_frame_granges <- granges_list[which(mcols(granges_list)[[frame_col]] == f)]
} else {
current_frame_granges <- granges_list[which(abs(mcols(granges_list)[[frame_col]]) == f)]
}
if ( is_circular ) {
start_pos <- get_best_start(current_frame_granges, overhang = overhang)
} else { start_pos <- 1 }
if ( start_pos[1] == 0 ) {
cat("no intervals in frame ", f, ", continue anyway\n")
next
} else {
score <- -Inf
for ( s in start_pos ) {
cat("calculate wis for start alignment ", s, "\n")
# rearrange for current start
current_frame_granges <- c(current_frame_granges[s:length(current_frame_granges)],
current_frame_granges[0:(s-1)])
from_get_wis <- get_wis(current_frame_granges,
max_score = score_col,
score_funct = score_f,
# max_funct = max_f,
overlap = overlap)
new_data <- from_get_wis$alignments
sum_score <- from_get_wis$max_score
if( sum_score > score ) {
score <- sum_score
best_data <- new_data
}
}
}
# collect everything from all frames
if (!exists("final_data")) {
final_data <- best_data
} else {
final_data <- c(final_data, best_data)
}
}
}
if(!exists("final_data")) {
warning("No intervals found to return")
}
return(final_data)
}
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
blast_result <- read_blast_xml(xml_file, grange_output = T, keep_sequences = F)
blast_result$alignments
# reading another format
# calculating the BLAST sum score of a set of alignments:
sum_score(blast_result$alignments$raw_score, blast_result$metadata)
# filter records:
blast_result$alignments <- filter_blast(blast_result$alignments,
min_len = 10,
max_e = 1,
min_identity = 0)
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
# throws error:
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
run_get_wis
source("wisard/R/WIS_functions.R")
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
run_get_wis
# library(devtools)
# setwd("/data/meyer/rob/wisard_final/")
# install("wisard")
library(wisard)
# reading an xml file
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
blast_result <- read_blast_xml(xml_file, grange_output = T, keep_sequences = F)
blast_result$alignments
# reading another format
# calculating the BLAST sum score of a set of alignments:
sum_score(blast_result$alignments$raw_score, blast_result$metadata)
# filter records:
blast_result$alignments <- filter_blast(blast_result$alignments,
min_len = 10,
max_e = 1,
min_identity = 0)
# throws error:
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
blast_result <- read_blast_xml(xml_file, grange_output = T, keep_sequences = F)
blast_result$alignments
# reading another format
# calculating the BLAST sum score of a set of alignments:
sum_score(blast_result$alignments$raw_score, blast_result$metadata)
# filter records:
blast_result$alignments <- filter_blast(blast_result$alignments,
min_len = 10,
max_e = 1,
min_identity = 0)
# throws error:
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
blast_result <- read_blast_xml(xml_file, grange_output = T, keep_sequences = F)
blast_result$alignments
# reading another format
# calculating the BLAST sum score of a set of alignments:
sum_score(blast_result$alignments$raw_score, blast_result$metadata)
# filter records:
blast_result$alignments <- filter_blast(blast_result$alignments,
min_len = 10,
max_e = 1,
min_identity = 0)
# throws error:
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
source("wisard/R/WIS_functions.R")
# throws error:
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
blast_result <- read_blast_xml(xml_file, grange_output = T, keep_sequences = F)
blast_result$alignments
# reading another format
# calculating the BLAST sum score of a set of alignments:
sum_score(blast_result$alignments$raw_score, blast_result$metadata)
# filter records:
blast_result$alignments <- filter_blast(blast_result$alignments,
min_len = 10,
max_e = 1,
min_identity = 0)
# throws error:
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
get_all_vars(blast_result$alignments)
get_best_start(blast_result$alignments)
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
# reading an xml file
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
blast_result <- read_blast_xml(xml_file, grange_output = T, keep_sequences = F)
blast_result$alignments
# calculating the BLAST sum score of a set of alignments:
sum_score(blast_result$alignments$raw_score, blast_result$metadata)
# filter records:
blast_result$alignments <- filter_blast(blast_result$alignments,
min_len = 10,
max_e = 1,
min_identity = 0)
# run wis
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
library(devtools)
setwd("/home/abc/wisard/")
install("wisard")
library(wisard)
# reading an xml file
xml_file <- system.file("extdata", "example.xml", package = 'wisard')
blast_result <- read_blast_xml(xml_file, grange_output = T, keep_sequences = F)
blast_result$alignments
# calculating the BLAST sum score of a set of alignments:
sum_score(blast_result$alignments$raw_score, blast_result$metadata)
# filter records:
blast_result$alignments <- filter_blast(blast_result$alignments,
min_len = 10,
max_e = 1,
min_identity = 0)
# run wis
wis_results <- run_get_wis(blast_result$alignments, is_circular = T,
use_strand = T,
score_col = "raw_score")
